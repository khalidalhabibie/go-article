// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	response "backend/app/article/delivery/http/response"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	utils "backend/pkg/utils"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// FlushAll provides a mock function with given fields:
func (_m *Cache) FlushAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: request
func (_m *Cache) Get(request utils.PaginationConfig) (*response.Index, error) {
	ret := _m.Called(request)

	var r0 *response.Index
	if rf, ok := ret.Get(0).(func(utils.PaginationConfig) *response.Index); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.PaginationConfig) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: request, _a1
func (_m *Cache) Set(request utils.PaginationConfig, _a1 response.Index) error {
	ret := _m.Called(request, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.PaginationConfig, response.Index) error); ok {
		r0 = rf(request, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCache(t testing.TB) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
