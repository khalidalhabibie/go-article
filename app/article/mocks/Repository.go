// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	models "backend/app/models"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	testing "testing"

	utils "backend/pkg/utils"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Count provides a mock function with given fields: config
func (_m *Repository) Count(config utils.PaginationConfig) (int64, error) {
	ret := _m.Called(config)

	var r0 int64
	if rf, ok := ret.Get(0).(func(utils.PaginationConfig) int64); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.PaginationConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: config
func (_m *Repository) FindAll(config utils.PaginationConfig) ([]models.Article, error) {
	ret := _m.Called(config)

	var r0 []models.Article
	if rf, ok := ret.Get(0).(func(utils.PaginationConfig) []models.Article); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.PaginationConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, tx
func (_m *Repository) Insert(_a0 *models.Article, tx *gorm.DB) error {
	ret := _m.Called(_a0, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Article, *gorm.DB) error); ok {
		r0 = rf(_a0, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
