// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	models "backend/app/models"

	mock "github.com/stretchr/testify/mock"

	request "backend/app/article/delivery/http/request"

	response "backend/app/article/delivery/http/response"

	testing "testing"

	utils "backend/pkg/utils"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: requsest
func (_m *Usecase) Create(requsest request.Create) (*models.Article, error) {
	ret := _m.Called(requsest)

	var r0 *models.Article
	if rf, ok := ret.Get(0).(func(request.Create) *models.Article); ok {
		r0 = rf(requsest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.Create) error); ok {
		r1 = rf(requsest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Index provides a mock function with given fields: _a0
func (_m *Usecase) Index(_a0 utils.PaginationConfig) (*response.Index, error) {
	ret := _m.Called(_a0)

	var r0 *response.Index
	if rf, ok := ret.Get(0).(func(utils.PaginationConfig) *response.Index); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.PaginationConfig) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t testing.TB) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
